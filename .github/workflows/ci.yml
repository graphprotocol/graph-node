name: Continuous Integration

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  THEGRAPH_STORE_POSTGRES_DIESEL_URL: "postgresql://postgres:postgres@localhost:5432/graph_node_test"

jobs:
  test:
    name: Run tests
    strategy:
      fail-fast: false
      matrix:
        rust: [ "stable", "beta" ]

    services:
      ipfs:
        image: ipfs/go-ipfs:v0.4.23
        ports:
          - 15001:5001

      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: graph_node_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: test-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --workspace --exclude graph-tests -- --nocapture
        env:
          IPFS_TEST_URI: "http://localhost:15001"
          GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: "true"

  integration-tests:
    name: Run integration tests
    strategy:
      fail-fast: false
      matrix:
        rust: [ "stable", "beta" ]

    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: test-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Build graph-node
        env:
          RUSTFLAGS: "-D warnings"
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Install Node 11
        uses: actions/setup-node@v2
        with:
          node-version: '11'

      - name: Run Integration Tests
        run: |
          npm install --global yarn
          yarn global add @graphprotocol/graph --prefix /usr/local
          graph test --standalone-node target/debug/graph-node --node-logs yarn test



  rustfmt:
    name: Check rustfmt style
    strategy:
      matrix:
        rust: [ "stable" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: ${{ matrix.rust }}
            components: rustfmt
            override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: rustfmt-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libpq-dev

      - name: Check formating
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  release-check:
    name: Build in release mode
    strategy:
      matrix:
        rust: [ "stable", "beta" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: ${{ matrix.rust }}
            override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: check-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install libpq-dev

      - name: Cargo check (debug)
        env:
          RUSTFLAGS: "-D warnings"
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --tests

      - name: Cargo check (release)
        env:
          RUSTFLAGS: "-D warnings"
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release

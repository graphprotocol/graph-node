syntax = "proto3";

package sf.ethereum.transform.v1;
option go_package = "github.com/streamingfast/firehose-ethereum/types/pb/sf/ethereum/transform/v1;pbtransform";

// CombinedFilter is a combination of "LogFilters" and "CallToFilters"
//
// It transforms the requested stream in two ways:
//   1. STRIPPING
//      The block data is stripped from all transactions that don't
//      match any of the filters.
//
//   2. SKIPPING
//      If an "block index" covers a range containing a
//      block that does NOT match any of the filters, the block will be
//      skipped altogether, UNLESS send_all_block_headers is enabled
//      In that case, the block would still be sent, but without any
//      transactionTrace
//
// The SKIPPING feature only applies to historical blocks, because
// the "block index" is always produced after the merged-blocks files
// are produced. Therefore, the "live" blocks are never filtered out.
//
message CombinedFilter {
  repeated LogFilter log_filters = 1;
  repeated CallToFilter call_filters = 2;

  // Always send all blocks. if they don't match any log_filters or call_filters,
  // all the transactions will be filtered out, sending only the header.
  bool send_all_block_headers = 3;
}

// MultiLogFilter concatenates the results of each LogFilter (inclusive OR)
message MultiLogFilter {
  repeated LogFilter log_filters = 1;
}

// LogFilter will match calls where *BOTH*
// * the contract address that emits the log is one in the provided addresses -- OR addresses list is empty --
// * the event signature (topic.0) is one of the provided event_signatures -- OR event_signatures is empty --
//
// a LogFilter with both empty addresses and event_signatures lists is invalid and will fail.
message LogFilter {
  repeated bytes addresses = 1;
  repeated bytes event_signatures = 2; // corresponds to the keccak of the event signature which is stores in topic.0
}

// MultiCallToFilter concatenates the results of each CallToFilter (inclusive OR)
message MultiCallToFilter {
  repeated CallToFilter call_filters = 1;
}

// CallToFilter will match calls where *BOTH*
// * the contract address (TO) is one in the provided addresses -- OR addresses list is empty --
// * the method signature (in 4-bytes format) is one of the provided signatures -- OR signatures is empty --
//
// a CallToFilter with both empty addresses and signatures lists is invalid and will fail.
message CallToFilter {
  repeated bytes addresses = 1;
  repeated bytes signatures = 2;
}

// Deprecated: LightBlock is deprecated, replaced by HeaderOnly, note however that the new transform
// does not have any transactions traces returned, so it's not a direct replacement.
message LightBlock {
}

// HeaderOnly returns only the block's header and few top-level core information for the block. Useful
// for cases where no transactions information is required at all.
//
// The structure that would will have access to after:
//
// ```ignore
// Block {
//  int32 ver = 1;
//  bytes hash = 2;
//  uint64 number = 3;
//  uint64 size = 4;
//  BlockHeader header = 5;
// }
// ```
//
// Everything else will be empty.
message HeaderOnly {
}

syntax = "proto3";

package sf.ethereum.transform.v1;
option go_package = "github.com/streamingfast/sf-ethereum/pb/sf/ethereum/transform/v1;pbtransform";

// MultiLogFilter concatenates the results of each LogFilter (inclusive OR)
message MultiLogFilter {
  repeated LogFilter log_filters = 1;
}

// LogFilter will match calls where *BOTH*
// * the contract address that emits the log is one in the provided addresses -- OR addresses list is empty --
// * the event signature (topic.0) is one of the provided event_signatures -- OR event_signatures is empty --
//
// a LogFilter with both empty addresses and event_signatures lists is invalid and will fail.
message LogFilter {
  repeated bytes addresses = 1;
  repeated bytes event_signatures = 2; // corresponds to the keccak of the event signature which is stores in topic.0
}

// MultiCallToFilter concatenates the results of each CallToFilter (inclusive OR)
message MultiCallToFilter {
  repeated CallToFilter call_filters = 1;
}

// CallToFilter will match calls where *BOTH*
// * the contract address (TO) is one in the provided addresses -- OR addresses list is empty --
// * the method signature (in 4-bytes format) is one of the provided signatures -- OR signatures is empty --
//
// a CallToFilter with both empty addresses and signatures lists is invalid and will fail.
message CallToFilter {
  repeated bytes addresses = 1;
  repeated bytes signatures = 2;
}

message LightBlock {
}

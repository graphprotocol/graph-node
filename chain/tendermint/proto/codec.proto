syntax = "proto3";

package fig.tendermint.codec.v1;

option go_package = "github.com/figment-networks/tendermint-protobuf-def/codec";

import "gogo.proto";
import "google/protobuf/descriptor.proto";

// used in Vote
enum SignedMsgType {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  SIGNED_MSG_TYPE_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "UnknownType"];
  // Votes
  SIGNED_MSG_TYPE_PREVOTE = 1 [(gogoproto.enumvalue_customname) = "PrevoteType"];
  SIGNED_MSG_TYPE_PRECOMMIT = 2 [(gogoproto.enumvalue_customname) = "PrecommitType"];
  // Proposals
  SIGNED_MSG_TYPE_PROPOSAL = 3 [(gogoproto.enumvalue_customname) = "ProposalType"];
}

// BlockIdFlag indicates which BlockID the signature is for
enum BlockIDFlag {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  BLOCK_ID_FLAG_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "BlockIDFlagUnknown"];
  BLOCK_ID_FLAG_ABSENT = 1 [(gogoproto.enumvalue_customname) = "BlockIDFlagAbsent"];
  BLOCK_ID_FLAG_COMMIT = 2 [(gogoproto.enumvalue_customname) = "BlockIDFlagCommit"];
  BLOCK_ID_FLAG_NIL = 3 [(gogoproto.enumvalue_customname) = "BlockIDFlagNil"];
}

message EventList {
  EventBlock newblock = 1;
  repeated EventTx transaction = 2;
  EventValidatorSetUpdates validatorsetupdates = 3;
}

// EventBlock
message EventBlock {
  Block block = 1;
  BlockID block_id = 2;  // not present in v0.34.13
  ResponseBeginBlock result_begin_block = 3;
  ResponseEndBlock result_end_block = 4;
}

message ResponseBeginBlock {
  repeated Event events = 1;
}

message ResponseEndBlock {
  repeated Validator validator_updates = 1;
  ConsensusParams consensus_param_updates = 2;
  repeated Event events = 3;
}

message ConsensusParams {
  Block block = 1;
  Evidence evidence = 2;
  Validator validator = 3;
  Version version = 4;
}

message Version {
  uint64 app_version = 1;
}

message Block {
  Header header = 1 [(gogoproto.nullable) = false];
  Data data = 2 [(gogoproto.nullable) = false];
  EvidenceList evidence = 3 [(gogoproto.nullable) = false];
  Commit last_commit = 4;
}

message Commit {
  uint64 height = 1; // must be > 0
  int32 round = 2; // must be > 0
  BlockID block_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];
  repeated CommitSig signatures = 4 [(gogoproto.nullable) = false]; // must be > 0
}

message CommitSig {
  BlockIDFlag block_id_flag = 1;  // must match those in the enum above
  Address validator_address = 2;  // hash 256 20 bytes - this is the first 20 characters of a 32-byte key - SHA256(pubkey)[:20]
  Timestamp timestamp = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes signature = 4;  // length should be > 0 and < 64
}

message EventBlockHeader {
  Header header = 1;
  int64 num_txs = 2;
  ResponseBeginBlock result_begin_block = 3;
  ResponseEndBlock result_end_block = 4;
}

message Header {
  Consensus version = 1 [(gogoproto.nullable) = false];
  string chain_id = 2 [(gogoproto.customname) = "ChainID"];
  uint64 height = 3;
  Timestamp time = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  BlockID last_block_id = 5 [(gogoproto.nullable) = false];
  bytes last_commit_hash = 6 [(fig.bytetype) = "Hash"];  // hash 256 32 bytes
  bytes data_hash = 7 [(fig.bytetype) = "Hash"];         // hash 256 32 bytes
  bytes validators_hash = 8 [(fig.bytetype) = "Hash"];   // hash 256 32 bytes
  bytes next_validators_hash = 9 [(fig.bytetype) = "Hash"];                        // hash 256 32 bytes
  bytes consensus_hash = 10 [(fig.bytetype) = "Hash"];  // hash 256 32 bytes
  bytes app_hash = 11 [(fig.bytetype) = "Hash"];  // determined by application, not a fixed length
  bytes last_results_hash = 12 [(fig.bytetype) = "Hash"];  // hash 256 32 bytes - first block will be results of an empty hash
  bytes evidence_hash = 13 [(fig.bytetype) = "Hash"];  // hash sha256 32 bytes
  Address proposer_address = 14; // hash 256 20 bytes - this is the first 20 characters of a 32-byte key - SHA256(pubkey)[:20]
}

message Consensus {
  option (gogoproto.equal) = true;
  uint64 block = 1;
  uint64 app = 2;
}

message BlockID {
  bytes hash = 1 [(fig.bytetype) = "Hash"];
  PartSetHeader part_set_header = 2 [(gogoproto.nullable) = false];
}

message PartSetHeader {
  uint32 total = 1;
  bytes hash = 2 [(fig.bytetype) = "Hash"]; // hash 256 32 bytes
}

message Data {
  repeated bytes txs = 1;
}

message Evidence {
  oneof sum {
    DuplicateVoteEvidence duplicate_vote_evidence = 1;
    LightClientAttackEvidence light_client_attack_evidence = 2;
  }
}

message DuplicateVoteEvidence {
  EventVote vote_a = 1;
  EventVote vote_b = 2;
  int64 total_voting_power = 3;
  int64 validator_power = 4;
  Timestamp timestamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

// EventTx
message EventTx {
  TxResult TxResult = 1;
}

// EventVote
message EventVote {
  SignedMsgType eventvotetype = 1 [json_name = "type"]; // should be present in the enum at the top of this file
  uint64 height = 2;  // must be > 0
  int32 round = 3;    // must be > 0
  BlockID block_id = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];
  Timestamp timestamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  Address validator_address = 6;  // hash with a length of 20
  int32 validator_index = 7;
  bytes signature = 8;  // hash length should be >0 and <64
}

message LightClientAttackEvidence {
  LightBlock conflicting_block = 1;
  int64 common_height = 2;
  repeated Validator byzantine_validators = 3;
  int64 total_voting_power = 4;
  Timestamp timestamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

message LightBlock {
  SignedHeader signed_header = 1;  // cannot be nil
  ValidatorSet validator_set = 2;  // cannot be nil
}

message ValidatorSet {
  repeated Validator validators = 1;  // cannot be empty of nil
  Validator proposer = 2;             // cannot be nil
  int64 total_voting_power = 3;
}

message SignedHeader {
  Header header = 1;
  Commit commit = 2;
}

message EvidenceList {
  repeated Evidence evidence = 1 [(gogoproto.nullable) = false];
}

message Validator {
  bytes address = 1;
  PublicKey pub_key = 2 [(gogoproto.nullable) = false];  // must be >0
  int64 voting_power = 3;
  int64 proposer_priority = 4;
}

message PublicKey {
  option (gogoproto.compare) = true;
  option (gogoproto.equal) = true;
  oneof sum {
    bytes ed25519 = 1;
    bytes secp256k1 = 2;
    bytes sr25519 = 3;
  }
}

message TxResult {
  uint64 height = 1;
  uint32 index = 2;
  bytes tx = 3;
  ResponseDeliverTx result = 4;
}

message ResponseDeliverTx {
  uint32 code = 1;
  bytes data = 2;
  string log = 3;
  string info = 4;
  int64 gas_wanted = 5 [json_name = "gas_wanted"];
  int64 gas_used = 6 [json_name = "gas_used"];
  repeated Event events = 7 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "events,omitempty"];
  string codespace = 8;
}

message Event {
  string eventtype = 1 [json_name = "type"];
  repeated EventAttribute attributes = 2;
}

message EventAttribute {
  string key = 1;
  string value = 2;
  bool index = 3;
}

message Address {
  bytes address = 1;
}

// EventValidatorSetUpdates
message EventValidatorSetUpdates {
  repeated Validator validator_updates = 1;
}

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message fig {
  extend google.protobuf.FieldOptions {
    string bytetype = 50003;
  }
}

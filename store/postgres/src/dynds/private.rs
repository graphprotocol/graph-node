use diesel::types::Bytea;

use crate::{DynColumn, DynTable};

#[derive(Clone, Debug)]
pub(crate) struct DataSourcesTable {
    namespace: String,
    qname: String,
    table: DynTable,
}

impl DataSourcesTable {
    const TABLE_NAME: &'static str = "data_sources$";

    pub(crate) fn new(namespace: String) -> Self {
        DataSourcesTable {
            qname: format!("{}.{}", namespace, Self::TABLE_NAME),
            table: diesel_dynamic_schema::schema(namespace.clone())
                .table(Self::TABLE_NAME.to_string()),
            namespace,
        }
    }

    pub(crate) fn as_ddl(&self) -> String {
        format!(
            "
            create table {nsp}.{table} (
                vid integer generated by default as identity primary key,
                block_range int4range not null,
                access_group integer generated by default as identity,
                manifest_idx integer not null,
                parent integer references {nsp}.{table},
                id bytea,
                params jsonb,
                context jsonb
            );
            ",
            nsp = self.namespace,
            table = Self::TABLE_NAME
        )
    }

    fn table(&self) -> DynTable {
        self.table.clone()
    }
}

# See also: ed42d219c6704a4aab57ce1ea66698e7.
# Note: This schema needs to be in sync with the dynamic data sources query
# and the metadata Rust types.

type Subgraph @entity {
    id: ID!
    name: String!
    versions: [SubgraphVersion!]! @derivedFrom(field: "subgraph")
    currentVersion: SubgraphVersion
    pendingVersion: SubgraphVersion
    createdAt: BigInt!
}

type SubgraphVersion @entity {
    id: ID!
    subgraph: Subgraph!
    # We store the id of a SubgraphDeployment, but since when we read
    # through GraphQL, we pull back a SubgraphDeploymentDetail which
    # contains a superset of the attributes of a SubgraphDeployment
    deployment: SubgraphDeploymentDetail!
    createdAt: BigInt!
}

type SubgraphDeployment @entity {
    id: ID! # Subgraph IPFS hash
    manifest: SubgraphManifest!
    failed: Boolean! @deprecated(reason: "Use `health`.")
    health: Health!
    synced: Boolean!

    "If the subgraph has failed, this is the error caused it"
    fatalError: SubgraphError

    "Sorted by block number, limited to 1000"
    nonFatalErrors: [SubgraphError!]!

    earliestEthereumBlockHash: Bytes
    earliestEthereumBlockNumber: BigInt
    latestEthereumBlockHash: Bytes
    latestEthereumBlockNumber: BigInt

    # Null if still healthy.
    lastHealthyEthereumBlockHash: Bytes
    lastHealthyEthereumBlockNumber: BigInt

    entityCount: BigInt!
    dynamicDataSources: [DynamicEthereumContractDataSource!] @derivedFrom(field: "deployment")
    graftBase: SubgraphDeployment
    graftBlockHash: Bytes
    graftBlockNumber: BigInt

    # Tracking of reorgs so that we can spot that a reorg
    # happened while a query was being processed
    reorgCount: Int
    currentReorgDepth: Int
    maxReorgDepth: Int
}

# This is not a real entity type. It is a view that can be queried, but
# not modified
type SubgraphDeploymentDetail @entity {
    id: ID! # Subgraph IPFS hash
    manifest: SubgraphManifest!
    failed: Boolean! @deprecated(reason: "Use `health`.")
    health: Health!
    synced: Boolean!

    "If the subgraph has failed, this is the error caused it"
    fatalError: SubgraphError

    "Sorted by block number, limited to 1000"
    nonFatalErrors: [SubgraphError!]!

    earliestEthereumBlockHash: Bytes
    earliestEthereumBlockNumber: BigInt
    latestEthereumBlockHash: Bytes
    latestEthereumBlockNumber: BigInt
    entityCount: BigInt!
    dynamicDataSources: [DynamicEthereumContractDataSource!] @derivedFrom(field: "deployment")
    graftBase: SubgraphDeployment
    graftBlockHash: Bytes
    graftBlockNumber: BigInt
    # From ethereum_networks
    ethereumHeadBlockNumber: BigInt
    ethereumHeadBlockHash: Bytes
    # From the first EthereumContractDataSource
    network: String
    # From SubgraphDeploymentAssignment, it is nullable here
    # as not every deployment is assigned
    nodeId: String
}

type SubgraphDeploymentAssignment @entity {
    id: ID! # Subgraph IPFS hash
    nodeId: String!
    cost: BigInt!
}

type SubgraphManifest @entity {
    id: ID!
    specVersion: String!
    description: String
    repository: String
    features: [String!]!
    schema: String!
    dataSources: [EthereumContractDataSource!]!
    templates: [EthereumContractDataSourceTemplate!]
}

type EthereumContractDataSource @entity {
    id: ID!
    kind: String!
    name: String!
    network: String
    source: EthereumContractSource!
    mapping: EthereumContractMapping!
}

type DynamicEthereumContractDataSource @entity {
    id: ID!
    kind: String!
    name: String!
    network: String
    source: EthereumContractSource!
    mapping: EthereumContractMapping!
    ethereumBlockHash: Bytes!
    ethereumBlockNumber: BigInt!
    deployment: SubgraphDeployment!

    "JSON object with user-provided keys and values, can be parsed as an entity"
    context: String
}

type EthereumContractSource @entity {
    id: ID!
    address: Bytes
    abi: String!
    startBlock: BigInt
}

type EthereumContractMapping @entity {
    id: ID!
    kind: String!
    apiVersion: String!
    language: String!
    file: String!
    entities: [String!]!
    abis: [EthereumContractAbi!]!
    blockHandlers: [EthereumBlockHandlerEntity!]
    callHandlers: [EthereumCallHandlerEntity!]
    eventHandlers: [EthereumContractEventHandler!]
}

type EthereumContractAbi @entity {
    id: ID!
    name: String!
    file: String!
}

type EthereumBlockHandlerEntity @entity {
    id: ID!
    handler: String!
    filter: EthereumBlockHandlerFilterEntity
}

type EthereumBlockHandlerFilterEntity @entity {
    id: ID!
    kind: String!
}

type EthereumCallHandlerEntity @entity {
    id: ID!
    function: String!
    handler: String!
}

type EthereumContractEventHandler @entity {
    id: ID!
    event: String!
    topic0: Bytes
    handler: String!
}

type EthereumContractDataSourceTemplate @entity {
    id: ID!
    kind: String!
    name: String!
    network: String
    source: EthereumContractDataSourceTemplateSource!
    mapping: EthereumContractMapping!
}

type EthereumContractDataSourceTemplateSource @entity {
    id: ID!
    abi: String!
}

type SubgraphError {
  id: ID!

  subgraphId: String
  message: String!

  # Context for the error.
  blockNumber: BigInt
  blockHash: Bytes
  handler: String

  # `true` means we have certainty that the error is deterministic.
  deterministic: Boolean!
}

enum Health {
  "Subgraph syncing normally"
  healthy
  "Subgraph syncing but with errors"
  unhealthy
  "Subgraph halted due to errors"
  failed
}
